Assignment 2 – GitHub Actions

CLO 4: Use a version control system as a part of software construction activity.
You are a software engineer working on a project at XYZ Corp. The project aims to develop a web
application for managing tasks and projects. As part of your role, you're tasked with setting up
comprehensive automation using GitHub Actions to ensure code quality, facilitate continuous
integration, and streamline deployment processes. Your task is to set up a series of GitHub
Actions workflows to automate various aspects of the development lifecycle for the project. The
workflows should cover continuous integration, deployment pipeline, scheduled tasks,
dependency updates, code review, and documentation deployment. You can use below github
repository to perform the following task.
https://github.com/stevenjoezhang/heavens-above
Requirements:
1) Continuous Integration Setup:
• Task: Set up a GitHub Actions workflow to perform continuous integration for a project
of your choice.
• Description: Create a GitHub Actions workflow that triggers on every push to the main
branch. Configure the workflow to run tests, linting, and any other relevant checks for
your project. Ensure that the workflow provides clear feedback on the success or failure
of each check.
2) Deployment Pipeline:
• Task: Implement a deployment pipeline using GitHub Actions.
• Description: Develop a GitHub Actions workflow that automates the deployment process
for a web application or service. Define stages for building, testing, and deploying the
application to a hosting platform such as Heroku, AWS, or Azure. Ensure that the
deployment workflow is secure and follows best practices for continuous delivery.
3) Scheduled Tasks:
• Task: Set up scheduled tasks using GitHub Actions.
• Description: Create a GitHub Actions workflow that runs on a predefined schedule (e.g.,
daily, weekly) to perform maintenance tasks, data backups, or other automated
processes. Configure the workflow to execute specific commands or scripts at the
scheduled time and ensure that it provides relevant notifications or logs.
4) Dependency Updates:
• Task: Implement automated dependency updates with GitHub Actions.
• Description: Develop a GitHub Actions workflow that monitors the project's
dependencies for new versions and automatically updates them as needed. Utilize tools
like Dependabot or custom scripts to check for updates, create pull requests with
dependency changes, and run tests to verify compatibility. Ensure that the workflow
adheres to versioning policies and includes proper review mechanisms.
5) Code Review Workflow:
• Task: Create a GitHub Actions workflow to enhance code review processes.

• Description: Design a GitHub Actions workflow that automates code review tasks, such
as checking coding standards, analyzing code quality metrics, and scanning for security
vulnerabilities. Configure the workflow to provide feedback on pull requests and enforce
required checks before merging. Customize the workflow to integrate with code review
tools or services used by your team.
6) Documentation Deployment:
• Task: Automate documentation deployment using GitHub Actions.
• Description: Set up a GitHub Actions workflow to build and deploy project documentation
to a hosting platform (e.g., GitHub Pages, Read the Docs). Configure the workflow to
generate documentation from source files (e.g., Markdown, reStructuredText) and
publish it automatically whenever changes are made to the documentation repository.
Ensure that the deployment process is reliable and version-controlled.
7) Custom Workflow Integration:
• Task: Integrate a custom workflow using GitHub Actions.
• Description: Develop a custom workflow using GitHub Actionsto automate a specific task
or process relevant to your project. This could include tasks like generating release notes,
analyzing performance metrics, or syncing data between different systems. Implement
the workflow using GitHub Actions' flexible features and integrate it seamlessly into your
project's development workflow.
Deliverables:
1. YAML files for each workflow (e.g., `ci.yml`, `deploy.yml`, `scheduled-tasks.yml`,
`dependency-updates.yml`, `code-review.yml`, `documentation.yml`).
2. Detailed documentation explaining each workflow, its purpose, configuration, and how to
interpret results.
3. Test reports, deployment logs, and any relevant artifacts generated by the workflows.

Evaluation Criteria:
Your submission will be evaluated based on the following criteria:
1. Completeness and correctness of the GitHub Actions workflows.
2. Proper setup and configuration of each workflow.
3. Clarity and thoroughness of the documentation.
4. Compliance with best practices for continuous integration, deployment, and automation.